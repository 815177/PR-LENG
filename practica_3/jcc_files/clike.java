/* clike.java */
/* Generated By:JavaCC: Do not edit this line. clike.java */
package traductor;

//...

public class clike implements clikeConstants {
        //...

    public static void main(String[] args) {
        clike parser = null;

        try {
                if(args.length == 0) {
                                parser = new clike(System.in);
                        }
                        else {
                    parser = new clike(new java.io.FileInputStream(args[0]));
                        }
                        //Programa es el símbolo inicial de la gramática
                        parser.Programa();
                        //...
                        System.out.println("***** An\u00c3\u00a1lisis terminado con \u00c3\u00a9xito *****");
                }
                catch (java.io.FileNotFoundException e) {
                        System.err.println ("Fichero " + args[0] + " no encontrado.");
                }
                catch (TokenMgrError e) {
                System.err.println("LEX_ERROR: " + e.getMessage());
        }
                catch (Exception e) {
                System.out.println("EXCEPCION: " + e.getMessage());
                }
        //...
    }

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
  static final public void Programa() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tBOOL:{
        jj_consume_token(tBOOL);
        break;
        }
      case tCHAR:{
        jj_consume_token(tCHAR);
        break;
        }
      case tINT:{
        jj_consume_token(tINT);
        break;
        }
      case tCADENA:{
        jj_consume_token(tCADENA);
        break;
        }
      case tVOID:{
        jj_consume_token(tVOID);
        break;
        }
      case tRETURN:{
        jj_consume_token(tRETURN);
        break;
        }
      case tWHILE:{
        jj_consume_token(tWHILE);
        break;
        }
      case tIF:{
        jj_consume_token(tIF);
        break;
        }
      case tELSE:{
        jj_consume_token(tELSE);
        break;
        }
      case tFOR:{
        jj_consume_token(tFOR);
        break;
        }
      case tCOMA:{
        jj_consume_token(tCOMA);
        break;
        }
      case tPCOMA:{
        jj_consume_token(tPCOMA);
        break;
        }
      case tDIV:{
        jj_consume_token(tDIV);
        break;
        }
      case tSUM:{
        jj_consume_token(tSUM);
        break;
        }
      case tRES:{
        jj_consume_token(tRES);
        break;
        }
      case tMUL:{
        jj_consume_token(tMUL);
        break;
        }
      case tMODULO:{
        jj_consume_token(tMODULO);
        break;
        }
      case tIGUAL:{
        jj_consume_token(tIGUAL);
        break;
        }
      case tDIST:{
        jj_consume_token(tDIST);
        break;
        }
      case tEQUIVALE:{
        jj_consume_token(tEQUIVALE);
        break;
        }
      case tMENOR:{
        jj_consume_token(tMENOR);
        break;
        }
      case tMAYOR:{
        jj_consume_token(tMAYOR);
        break;
        }
      case tMENOR_IG:{
        jj_consume_token(tMENOR_IG);
        break;
        }
      case tMAYOR_IG:{
        jj_consume_token(tMAYOR_IG);
        break;
        }
      case tAND:{
        jj_consume_token(tAND);
        break;
        }
      case tOR:{
        jj_consume_token(tOR);
        break;
        }
      case tNEG:{
        jj_consume_token(tNEG);
        break;
        }
      case tREF:{
        jj_consume_token(tREF);
        break;
        }
      case tINI_CORCH:{
        jj_consume_token(tINI_CORCH);
        break;
        }
      case tFIN_CORCH:{
        jj_consume_token(tFIN_CORCH);
        break;
        }
      case tINI_PARENT:{
        jj_consume_token(tINI_PARENT);
        break;
        }
      case tFIN_PARENT:{
        jj_consume_token(tFIN_PARENT);
        break;
        }
      case tINI_LLAVES:{
        jj_consume_token(tINI_LLAVES);
        break;
        }
      case tFIN_LLAVES:{
        jj_consume_token(tFIN_LLAVES);
        break;
        }
      case tIDENT:{
        jj_consume_token(tIDENT);
        break;
        }
      case tDIGIT_CONST:{
        jj_consume_token(tDIGIT_CONST);
        break;
        }
      case tSTRING_CONST:{
        jj_consume_token(tSTRING_CONST);
        break;
        }
      case tCHAR_CONST:{
        jj_consume_token(tCHAR_CONST);
        break;
        }
      case tBOOL_CONST:{
        jj_consume_token(tBOOL_CONST);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tBOOL:
      case tCHAR:
      case tINT:
      case tCADENA:
      case tVOID:
      case tRETURN:
      case tWHILE:
      case tIF:
      case tELSE:
      case tFOR:
      case tCOMA:
      case tPCOMA:
      case tDIV:
      case tSUM:
      case tRES:
      case tMUL:
      case tMODULO:
      case tIGUAL:
      case tDIST:
      case tEQUIVALE:
      case tMENOR:
      case tMAYOR:
      case tMENOR_IG:
      case tMAYOR_IG:
      case tAND:
      case tOR:
      case tNEG:
      case tREF:
      case tINI_CORCH:
      case tFIN_CORCH:
      case tINI_PARENT:
      case tFIN_PARENT:
      case tINI_LLAVES:
      case tFIN_LLAVES:
      case tIDENT:
      case tDIGIT_CONST:
      case tSTRING_CONST:
      case tCHAR_CONST:
      case tBOOL_CONST:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public clikeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xffffffe0,0xffffffe0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xfff,0xfff,};
	}

  /** Constructor with InputStream. */
  public clike(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public clike(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new clikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public clike(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new clikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new clikeTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public clike(clikeTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(clikeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[50];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 50; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
