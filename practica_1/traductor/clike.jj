//*****************************************************************
// File:   cl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   noviembre 2022
// Coms:   export JAVA_HOME=/usr/
//		   compilar mediante "ant"
//*****************************************************************

options {
 	IGNORE_CASE = false;
 	COMMON_TOKEN_ACTION = true;
 	// DEBUG_PARSER = true;
 	// ERROR_REPORTING = false;
}

PARSER_BEGIN(clike)

package traductor;

//...

public class clike {
	//...
	
    public static void main(String[] args) {
    	clike parser = null;
    	
    	try {
	    	if(args.length == 0) {
				parser = new clike(System.in);
			}
			else {
	            parser = new clike(new java.io.FileInputStream(args[0]));
			}
			//Programa es el símbolo inicial de la gramática
			parser.Programa(at);
			//...
			System.out.println("***** Análisis terminado con éxito *****");
		}
		catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		}
		catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        }
        //...
    }
}
PARSER_END(clike)

TOKEN : {
 	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
}

TOKEN : {
|	< tBOOL: "bool" >
|	< tCHAR: "char" >
|	< tINT: "int" >
|	< tCADENA: "int" >
|   < tVOID: "void" >
|	< tRETURN: "return" >
|	< tWHILE: "while" >
|	< tCOMA: "," >
|	< tPCOMA: ";" >
|	< tDIV: "/" >
|	< tSUM: "+" >
|	< tRES: "-" >
|	< tMUL: "*" >
|	< #tINIT_COMENT: "//" >
|	< tIGUAL: "=" >
|	< tDIST: "!=" >
|	< tEQUIVALE: "==" >
|	< tMENOR: "<" >
|	< tMAYOR: ">" >
|	< tMENOR_IG: "<=" >
|	< tMAYOR_IG: ">=" >
|	< tNEG: "!" >
|	< tREF : "&" >
|	< #tBBAJA: "_" >
|	< tINI_CORCH: "[" >
|	< tFIN_CORCH: "]" >
|	< tINI_PARENT: "(" >
|	< tFIN_PARENT: ")" >
}

TOKEN : {
| 	< tIDENT : [#LETTER]([#tBBAJA | #DIGIT | #LETTER])* >
|	< tDIGIT_CONST: [#DIGIT]+ >
|	< tSTRING_CONST: ["""][~"\n","\t"]["""] >
|	< tCHAR_CONST: ['][~"\n","\t"][']  >
|	< tBOOL_CONST: "true" | "false" >
}

SKIP:  { " " | "\t" | "\n" }

SPECIAL_TOKEN :
{
  <tERROR: ~[] > {
  System.out.println("(<" + matchedToken.beginLine + "," + matchedToken.beginColumn + ">): simbolo no reconocido: " + matchedToken.image)}
  
  
  <tCOMENT: [#tINIT_COMENT][~"\n"]*["\n"] > {} 
}

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
void Programa() : 
{

}
{
	( 
		< tBEGIN > | < tBOOL > | < tCHAR > | ...
	)+
	< EOF >
}

TOKEN_MGR_DECLS : {
	void CommonTokenAction(Token token) {
		System.out.println("(" + token.beginLine + "," + token.beginColumn + "): " + clikeConstants.tokenImage[token.kind] + " " + token.image);
	}
}